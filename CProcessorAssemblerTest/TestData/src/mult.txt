-- 負数を含む8bitの2整数の乗算プログラム

-- 初期設定
-- 0x8000 <= 掛けられる数
-- 0x8001 <= 掛ける数
-- 0x8002 <= 計算結果
-- 0x8003 <= 符号反転フラグ
-- 終了後にAに掛ける数（=繰り返し回数）が入る
SETIX 0x8000
LDIB -2
STDB
SETIXL 0x01
LDIA -3
STDA

-- 掛けられる数の0チェック
INCB      -- インクリメントして
DECB      -- デクリメントする（0判定）
JPZ :end  -- 0であれば終了地点へジャンプ

-- 掛ける数の0チェック
INCA      -- インクリメントして
DECA      -- デクリメントする（0判定）
JPZ :end  -- 0であれば終了地点へジャンプ

-- 符号反転フラグ設定
:op2check
LDIB 0x80       -- 上位1ビットのマスク
ANDA            -- マスク実行
JPZ :main       -- 0であれば正数なのでmain処理へジャンプ
LDDA            -- 掛ける数をAにロード
DECA            -- 掛ける数の絶対値を取る
NOTA            -- 
STDA            -- 絶対値を格納
LDIB 1          -- 符号反転フラグを立てる
SETIXL 0x03     -- 
STDB            -- 

:main
INCA        -- インクリメントして
DECA        -- デクリメントする（0判定）
:mult
JPZ :sign   -- 繰り返し終了であれば符号適用処理にジャンプ
SETIXL 0x00 -- 掛けられる数を
LDDA        -- Aにロード
SETIXL 0x02 -- 計算結果を
LDDB        -- Bにロード
ADDB        -- B <= A + B
STDB        -- 計算結果をメモリに格納
SETIXL 0x01 -- 掛ける数を
LDDA        -- Aにロード
DECA        -- デクリメントして
STDA        -- メモリに格納
JP :mult    -- 掛け算処理の最初に戻る

-- 符号適用処理
:sign
SETIXL 0x03   -- 符号反転フラグを
LDDA          -- Aにロード
DECA          -- Aをデクリメント
JPZ :negative -- 0であればフラグが立っているので符号反転処理へジャンプ
JP :end       -- 0でなければフラグは立っていないので終了地点へジャンプ
:negative
SETIXL 0x02   -- 計算結果を
LDDB          -- Bにロード
NOTB          -- 2の補数を取って符号を反転する
INCB          -- 
STDB          -- 符号反転後の結果を格納

:end
NOP
JP :end